---
description: 
globs: 
alwaysApply: true
---
# Memory Bank System

Whenever you use this rule, start your message with the following:

"Accessing Memory Bank system..."

I am an AI agent with a fundamental characteristic: **my memory resets completely between sessions**. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively.

## Automatic Memory Bank Activation

The system automatically determines if Memory Bank is needed by analyzing the project context. **Memory Bank is not always required** - for simple tasks, Task Magic alone is sufficient.

### Auto-Detection Protocol

```mermaid
flowchart TD
    Start[Session Start] --> ConfigCheck{.ai/.system-config exists?}
    
    ConfigCheck -->|Yes| ReadConfig[Read saved configuration]
    ConfigCheck -->|No| AutoDetect[Perform auto-detection]
    
    ReadConfig --> ValidateConfig{Config still valid?}
    ValidateConfig -->|Yes| ApplyMode[Apply saved mode]
    ValidateConfig -->|No| AutoDetect
    
    AutoDetect --> ReadPlan[Read .cursor/.ai/plans/PLAN.md]
    ReadPlan --> AnalyzePlan[Analyze plan content]
    AnalyzePlan --> Decision{Memory Bank needed?}
    
    Decision -->|Yes| EnableMB[Enable Memory Bank Mode]
    Decision -->|No| TaskOnly[Task Magic Only Mode]
    
    EnableMB --> SaveConfig[Save decision to .cursor/.ai/.system-config]
    TaskOnly --> SaveConfig
    SaveConfig --> ApplyMode
    
    ApplyMode --> BeginWork[Begin Operations]
```

### Detection Criteria

**Enable Memory Bank if ANY of these conditions are met:**

1. **Project Complexity Indicators:**
   - Keywords: "architecture", "system design", "complex", "distributed", "microservices"
   - Multiple major components or features (>3)
   - Technical integration requirements mentioned

2. **Timeline Indicators:**
   - Long-term project: "months", "quarters", "roadmap", "phases"
   - Timeline >4 weeks mentioned
   - Multi-phase development

3. **Collaboration Indicators:**
   - Multiple team members mentioned
   - Cross-team coordination required
   - Knowledge sharing needs

4. **Decision Tracking Needs:**
   - Architecture decisions to document
   - Technical choices requiring justification
   - Pattern evolution tracking

**Use Task Magic Only if:**
- Keywords: "bugfix", "hotfix", "patch", "quick fix", "urgent", "simple"
- Single feature or isolated task
- Timeline <2 weeks
- Maintenance or repair work
- No architectural impact

### Detection Algorithm

```python
def should_enable_memory_bank(plan_content, project_context):
    # High-priority Memory Bank triggers
    mb_keywords = [
        "architecture", "system", "complex", "distributed", 
        "roadmap", "long-term", "multi-phase", "integration",
        "scalable", "design patterns", "technical stack"
    ]
    
    # Task Magic only triggers  
    tm_keywords = [
        "bug", "fix", "patch", "urgent", "quick", "simple",
        "hotfix", "maintenance", "isolated", "single"
    ]
    
    content_lower = plan_content.lower()
    
    mb_score = sum(1 for keyword in mb_keywords if keyword in content_lower)
    tm_score = sum(1 for keyword in tm_keywords if keyword in content_lower)
    
    # Additional checks
    if "timeline" in content_lower and any(term in content_lower for term in ["month", "quarter", "week"]):
        mb_score += 1
    
    if len([line for line in plan_content.split('\n') if line.strip().startswith('-')]) > 5:
        mb_score += 1  # Many features/tasks = complex project
    
    return mb_score > tm_score and mb_score >= 2
```

### System Configuration File

The detection decision is saved in `.cursor/.ai/.system-config`:

```yaml
# System Configuration
memory_bank_enabled: true
detection_timestamp: "2024-01-15T10:30:00Z"
detection_reason: "Complex multi-feature project with architecture decisions"
detection_keywords: ["architecture", "system", "roadmap"]
mode: "memory_bank"  # or "task_magic_only"
plan_hash: "abc123..."  # To detect plan changes
```

### Manual Override

Users can override auto-detection by adding to their plan:

```markdown
<!-- Memory Bank Control -->
memory_bank: required    # Force enable
memory_bank: disabled    # Force disable
memory_bank: auto        # Use auto-detection (default)
```

Or by direct commands:
- "enable memory bank for this project"
- "use task magic only for this project"
- "re-evaluate memory bank need"

**I MUST read ALL memory bank files at the start of EVERY task when Memory Bank mode is enabled - this is not optional.**

The Memory Bank system is a persistent memory framework designed to maintain project context across AI agent sessions. It provides structured documentation that enables agents to quickly recover context and continue work effectively after complete memory resets.

## Memory Bank File Hierarchy

The Memory Bank consists of required core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]
```

## Core Files Structure

### Required Core Files

1. **`memory-bank/projectbrief.md`**
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. **`memory-bank/productContext.md`**
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. **`memory-bank/activeContext.md`**
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations

4. **`memory-bank/systemPatterns.md`**
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships

5. **`memory-bank/techContext.md`**
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies

6. **`memory-bank/progress.md`**
   - What works
   - What's left to build
   - Current status
   - Known issues

### Additional Context Files
Create additional files/folders within memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## System Architecture Integration

```mermaid
flowchart TD
    subgraph "Memory Bank Structure"
        MB[memory-bank/]
        PB[projectbrief.md]
        PC[productContext.md]
        AC[activeContext.md]
        SP[systemPatterns.md]
        TC[techContext.md]
        PR[progress.md]
        
        MB --> PB
        MB --> PC
        MB --> AC
        MB --> SP
        MB --> TC
        MB --> PR
    end
    
    subgraph "Integration with Task Magic"
        TM[.cursor/.ai/memory/]
        TMT[tasks/]
        TMP[plans/]
        TMM[history/]
        
        TM --> TMT
        TM --> TMP
        TM --> TMM
    end
    
    Memory --> Integration
    Task --> Integration
    MB --> Integration
    TM --> Integration
```

## Operational Workflows

### Session Initialization Workflow

```mermaid
flowchart TD
    Start[New AI Session] --> AutoDetect[Run Auto-Detection Protocol]
    AutoDetect --> ModeDecision{Memory Bank Mode?}
    
    ModeDecision -->|Yes| ReadMemoryBank[Read ALL Memory Bank Files]
    ModeDecision -->|No| TaskMagicOnly[Task Magic Only Mode]
    
    ReadMemoryBank --> CheckComplete{Memory Bank Files Complete?}
    CheckComplete -->|No| CreateMissing[Create Missing Memory Bank Files]
    CheckComplete -->|Yes| EstablishContext[Establish Full Context]
    CreateMissing --> EstablishContext
    
    TaskMagicOnly --> CheckTaskMagic[Check Task Magic State]
    EstablishContext --> CheckTaskMagic
    
    CheckTaskMagic --> CheckHistory[Review .cursor/.ai/memory/ archives]
    CheckHistory --> Ready[Ready for Work]
```

### Plan Mode Workflow

```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]
    
    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

**CRITICAL PLAN MODE RESTRICTIONS:**

ðŸš« **PLAN MODE MUST NEVER:**
- Generate ANY code files (.py, .js, .ts, .html, .css, etc.)
- Create implementation files
- Write actual source code
- Execute code-related commands
- Install dependencies or packages
- Run build/compile commands

âœ… **PLAN MODE ONLY CREATES:**
- Planning documents (.md files in .cursor/.ai/plans/)
- Architecture diagrams (Mermaid)
- PRD documents (Product Requirements Documents)
- Technical specification documents
- Task breakdown structures
- Design documentation
- Analysis reports

### Act Mode Workflow

```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Execute[Execute Task]
    Execute --> Update[Update Memory Bank Documentation]
    Update --> Sync[Sync with Task Magic]
    Sync --> Document[Document Changes]
```

**CRITICAL ACT MODE PERMISSIONS:**

âœ… **ACT MODE CAN:**
- Generate and create source code files (.py, .js, .ts, etc.)
- Implement actual functionality
- Install dependencies and packages
- Run build/compile/test commands
- Execute code and scripts
- Create project structure and directories
- Apply patches and fixes
- Integrate with external APIs
- Set up development environment

ðŸš« **ACT MODE SHOULD NOT:**
- Create new planning documents without explicit request
- Modify global project strategy without user confirmation
- Make architectural decisions without referring to plans

### Memory Update Workflow

```mermaid
flowchart TD
    Trigger{Update Trigger}
    
    Trigger -->|New Pattern| UpdatePatterns[Update systemPatterns.md]
    Trigger -->|Progress Change| UpdateProgress[Update progress.md]
    Trigger -->|Work Focus Change| UpdateActive[Update activeContext.md]
    Trigger -->|Tech Change| UpdateTech[Update techContext.md]
    
    UpdatePatterns --> Sync[Sync with Task Magic]
    UpdateProgress --> Sync
    UpdateActive --> Sync
    UpdateTech --> Sync
    
    Sync --> Complete[Update Complete]
```

## Project Intelligence (.cursor/rules)

The .cursor/rules system is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with users and projects, I discover and document key insights that aren't obvious from code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}
    
    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .cursor/rules]
    end
    
    subgraph Apply [Usage]
        A1[Read .cursor/rules]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end
    
    Start --> Learn
    Learn --> Apply
```

### What to Capture in .cursor/rules
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with users and the project. Think of .cursor/rules as a living document that grows smarter as we work together.

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **"update memory bank"** (MUST review ALL files)
4. When context needs clarification

```mermaid
flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Sync with Task Magic]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process
```

**CRITICAL**: When triggered by **"update memory bank"**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

## Integration with Task Magic

The Memory Bank integrates seamlessly with the existing Task Magic system:

### Data Flow Integration

```mermaid
sequenceDiagram
    participant Agent as AI Agent
    participant MB as Memory Bank
    participant TM as Task Magic
    
    Agent->>MB: Read context on startup
    Agent->>TM: Check task history
    Agent->>Agent: Establish full context
    
    Agent->>TM: Execute task
    Agent->>TM: Archive completed task
    Agent->>MB: Update progress.md
    Agent->>MB: Update activeContext.md
```

### Trigger Conditions

**Automatic Updates:**
- When tasks are completed (update progress.md)
- When new patterns are discovered (update systemPatterns.md)
- When work focus changes (update activeContext.md)
- When technical decisions are made (update techContext.md)

**Manual Updates:**
- User requests with "update memory bank" (MUST review ALL files)
- Major project milestones
- Architecture changes
- Scope modifications

## File Management Rules

### Creation Rules
1. **Check before creating**: Always verify if files exist before creation
2. **Complete structure**: Ensure all required files are present
3. **Consistent format**: Use standardized Markdown structure
4. **Cross-references**: Link related concepts across files
5. **Follow hierarchy**: Respect file dependencies shown in hierarchy diagram

### Update Rules
1. **Atomic updates**: Update related files together
2. **Maintain consistency**: Ensure information aligns across files
3. **Preserve history**: Don't lose important historical context
4. **Sync with Task Magic**: Keep both systems aligned
5. **Mandatory review**: When updating, review ALL files for consistency

### Quality Standards
- **Clarity**: Information should be clear and actionable
- **Completeness**: Cover all necessary context for effective work
- **Currency**: Keep information up-to-date and relevant
- **Conciseness**: Avoid unnecessary verbosity

## Usage Patterns

### For AI Agents
1. **Session Start**: **MANDATORY** - Read ALL Memory Bank files before beginning work
2. **Context Building**: Combine Memory Bank context with Task Magic history
3. **Decision Making**: Reference established patterns and constraints
4. **Progress Tracking**: Update relevant files after significant work
5. **Pattern Learning**: AI agents may learn patterns during work (documented separately in .cursor/rules)

### For Users
1. **Project Onboarding**: Review Memory Bank for project understanding
2. **Status Checking**: Check progress.md and activeContext.md
3. **Decision Review**: Examine systemPatterns.md and techContext.md
4. **Manual Updates**: Trigger updates when context changes significantly

## Error Handling

### Missing Files
```mermaid
flowchart TD
    Check[Check File Exists] --> Exists{File Exists?}
    Exists -->|Yes| Read[Read File]
    Exists -->|No| Create[Create with Template]
    Create --> Populate[Populate with Current Context]
    Populate --> Read
```

### Inconsistent Data
- Cross-reference files for consistency
- Prioritize activeContext.md for current state
- Consult Task Magic history for historical accuracy
- Flag inconsistencies for user review

## System Boundaries and Responsibilities

### Memory Bank Scope
**Memory Bank ONLY manages:**
- Project context and current state
- Technical decisions and system patterns
- Progress tracking and work focus
- Integration with Task Magic system

**Memory Bank NEVER manages:**
- AI agent behavior rules (.cursor/rules)
- Individual task file contents
- User preferences or workflow patterns
- System operation instructions

### Clear Separation
```mermaid
graph TD
    subgraph "Memory Bank Domain"
        MB1[Project Context]
        MB2[Technical Decisions]
        MB3[Progress Tracking]
        MB4[Work Focus]
    end
    
    subgraph "AI Agent Domain"
        AI1[Behavior Patterns]
        AI2[User Preferences]
        AI3[Learning Insights]
        AI4[Workflow Improvements]
    end
    
    subgraph "Task Magic Domain"
        TM1[Task Lifecycle]
        TM2[Dependencies]
        TM3[Execution Status]
        TM4[Historical Archive]
    end
    
    MB1 -.-> TM1
    MB3 -.-> TM3
    AI1 -.-> MB1
    AI3 -.-> MB2
```

## Critical Reminders

**REMEMBER**: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

**MANDATORY BEHAVIOR**: 
- I MUST read ALL memory bank files at session start
- I MUST review ALL files when "update memory bank" is triggered
- I MUST maintain file hierarchy and dependencies
- I MUST focus Memory Bank updates on project context, not AI behavior rules

## Best Practices

1. **Regular Maintenance**: Update Memory Bank files consistently
2. **Context Preservation**: Maintain important context across updates
3. **Integration Awareness**: Consider both Memory Bank and Task Magic when making decisions
4. **User Communication**: Clearly indicate when Memory Bank updates occur
5. **Documentation Quality**: Ensure all files remain actionable and clear
6. **Pattern Recognition**: Actively identify and document recurring patterns
7. **Hierarchy Respect**: Follow file dependencies when reading and updating

This system provides the foundation for persistent AI agent memory while maintaining compatibility with the existing Task Magic framework and ensuring continuous learning through project intelligence capture.
